// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/trace/v2/trace.proto

package v2

import (
	fmt "fmt"
	v1 "github.com/census-instrumentation/opencensus-proto/gen-go/trace/v1"
	core "github.com/envoyproxy/go-control-plane/envoy/api/v2/core"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	_struct "github.com/golang/protobuf/ptypes/struct"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type OpenCensusConfig_TraceContext int32

const (
	// No-op default, no trace context is utilized.
	OpenCensusConfig_NONE OpenCensusConfig_TraceContext = 0
	// W3C Trace-Context format "traceparent:" header.
	OpenCensusConfig_TRACE_CONTEXT OpenCensusConfig_TraceContext = 1
	// Binary "grpc-trace-bin:" header.
	OpenCensusConfig_GRPC_TRACE_BIN OpenCensusConfig_TraceContext = 2
	// "X-Cloud-Trace-Context:" header.
	OpenCensusConfig_CLOUD_TRACE_CONTEXT OpenCensusConfig_TraceContext = 3
	// X-B3-* headers.
	OpenCensusConfig_B3 OpenCensusConfig_TraceContext = 4
)

var OpenCensusConfig_TraceContext_name = map[int32]string{
	0: "NONE",
	1: "TRACE_CONTEXT",
	2: "GRPC_TRACE_BIN",
	3: "CLOUD_TRACE_CONTEXT",
	4: "B3",
}

var OpenCensusConfig_TraceContext_value = map[string]int32{
	"NONE":                0,
	"TRACE_CONTEXT":       1,
	"GRPC_TRACE_BIN":      2,
	"CLOUD_TRACE_CONTEXT": 3,
	"B3":                  4,
}

func (x OpenCensusConfig_TraceContext) String() string {
	return proto.EnumName(OpenCensusConfig_TraceContext_name, int32(x))
}

func (OpenCensusConfig_TraceContext) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0785d24fc8ab55c7, []int{5, 0}
}

// The tracing configuration specifies global
// settings for the HTTP tracer used by Envoy. The configuration is defined by
// the :ref:`Bootstrap <envoy_api_msg_config.bootstrap.v2.Bootstrap>` :ref:`tracing
// <envoy_api_field_config.bootstrap.v2.Bootstrap.tracing>` field. Envoy may support other tracers
// in the future, but right now the HTTP tracer is the only one supported.
type Tracing struct {
	// Provides configuration for the HTTP tracer.
	Http                 *Tracing_Http `protobuf:"bytes,1,opt,name=http,proto3" json:"http,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Tracing) Reset()         { *m = Tracing{} }
func (m *Tracing) String() string { return proto.CompactTextString(m) }
func (*Tracing) ProtoMessage()    {}
func (*Tracing) Descriptor() ([]byte, []int) {
	return fileDescriptor_0785d24fc8ab55c7, []int{0}
}

func (m *Tracing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tracing.Unmarshal(m, b)
}
func (m *Tracing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tracing.Marshal(b, m, deterministic)
}
func (m *Tracing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tracing.Merge(m, src)
}
func (m *Tracing) XXX_Size() int {
	return xxx_messageInfo_Tracing.Size(m)
}
func (m *Tracing) XXX_DiscardUnknown() {
	xxx_messageInfo_Tracing.DiscardUnknown(m)
}

var xxx_messageInfo_Tracing proto.InternalMessageInfo

func (m *Tracing) GetHttp() *Tracing_Http {
	if m != nil {
		return m.Http
	}
	return nil
}

type Tracing_Http struct {
	// The name of the HTTP trace driver to instantiate. The name must match a
	// supported HTTP trace driver. Built-in trace drivers:
	//
	// - *envoy.lightstep*
	// - *envoy.zipkin*
	// - *envoy.dynamic.ot*
	// - *envoy.tracers.datadog*
	// - *envoy.tracers.opencensus*
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Trace driver specific configuration which depends on the driver being instantiated.
	// See the trace drivers for examples:
	//
	// - :ref:`LightstepConfig <envoy_api_msg_config.trace.v2.LightstepConfig>`
	// - :ref:`ZipkinConfig <envoy_api_msg_config.trace.v2.ZipkinConfig>`
	// - :ref:`DynamicOtConfig <envoy_api_msg_config.trace.v2.DynamicOtConfig>`
	// - :ref:`DatadogConfig <envoy_api_msg_config.trace.v2.DatadogConfig>`
	// - :ref:`OpenCensusConfig <envoy_api_msg_config.trace.v2.OpenCensusConfig>`
	//
	// Types that are valid to be assigned to ConfigType:
	//	*Tracing_Http_Config
	//	*Tracing_Http_TypedConfig
	ConfigType           isTracing_Http_ConfigType `protobuf_oneof:"config_type"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *Tracing_Http) Reset()         { *m = Tracing_Http{} }
func (m *Tracing_Http) String() string { return proto.CompactTextString(m) }
func (*Tracing_Http) ProtoMessage()    {}
func (*Tracing_Http) Descriptor() ([]byte, []int) {
	return fileDescriptor_0785d24fc8ab55c7, []int{0, 0}
}

func (m *Tracing_Http) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tracing_Http.Unmarshal(m, b)
}
func (m *Tracing_Http) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tracing_Http.Marshal(b, m, deterministic)
}
func (m *Tracing_Http) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tracing_Http.Merge(m, src)
}
func (m *Tracing_Http) XXX_Size() int {
	return xxx_messageInfo_Tracing_Http.Size(m)
}
func (m *Tracing_Http) XXX_DiscardUnknown() {
	xxx_messageInfo_Tracing_Http.DiscardUnknown(m)
}

var xxx_messageInfo_Tracing_Http proto.InternalMessageInfo

func (m *Tracing_Http) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type isTracing_Http_ConfigType interface {
	isTracing_Http_ConfigType()
}

type Tracing_Http_Config struct {
	Config *_struct.Struct `protobuf:"bytes,2,opt,name=config,proto3,oneof"`
}

type Tracing_Http_TypedConfig struct {
	TypedConfig *any.Any `protobuf:"bytes,3,opt,name=typed_config,json=typedConfig,proto3,oneof"`
}

func (*Tracing_Http_Config) isTracing_Http_ConfigType() {}

func (*Tracing_Http_TypedConfig) isTracing_Http_ConfigType() {}

func (m *Tracing_Http) GetConfigType() isTracing_Http_ConfigType {
	if m != nil {
		return m.ConfigType
	}
	return nil
}

func (m *Tracing_Http) GetConfig() *_struct.Struct {
	if x, ok := m.GetConfigType().(*Tracing_Http_Config); ok {
		return x.Config
	}
	return nil
}

func (m *Tracing_Http) GetTypedConfig() *any.Any {
	if x, ok := m.GetConfigType().(*Tracing_Http_TypedConfig); ok {
		return x.TypedConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Tracing_Http) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Tracing_Http_Config)(nil),
		(*Tracing_Http_TypedConfig)(nil),
	}
}

// Configuration for the LightStep tracer.
type LightstepConfig struct {
	// The cluster manager cluster that hosts the LightStep collectors.
	CollectorCluster string `protobuf:"bytes,1,opt,name=collector_cluster,json=collectorCluster,proto3" json:"collector_cluster,omitempty"`
	// File containing the access token to the `LightStep
	// <https://lightstep.com/>`_ API.
	AccessTokenFile      string   `protobuf:"bytes,2,opt,name=access_token_file,json=accessTokenFile,proto3" json:"access_token_file,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LightstepConfig) Reset()         { *m = LightstepConfig{} }
func (m *LightstepConfig) String() string { return proto.CompactTextString(m) }
func (*LightstepConfig) ProtoMessage()    {}
func (*LightstepConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0785d24fc8ab55c7, []int{1}
}

func (m *LightstepConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LightstepConfig.Unmarshal(m, b)
}
func (m *LightstepConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LightstepConfig.Marshal(b, m, deterministic)
}
func (m *LightstepConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LightstepConfig.Merge(m, src)
}
func (m *LightstepConfig) XXX_Size() int {
	return xxx_messageInfo_LightstepConfig.Size(m)
}
func (m *LightstepConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_LightstepConfig.DiscardUnknown(m)
}

var xxx_messageInfo_LightstepConfig proto.InternalMessageInfo

func (m *LightstepConfig) GetCollectorCluster() string {
	if m != nil {
		return m.CollectorCluster
	}
	return ""
}

func (m *LightstepConfig) GetAccessTokenFile() string {
	if m != nil {
		return m.AccessTokenFile
	}
	return ""
}

type ZipkinConfig struct {
	// The cluster manager cluster that hosts the Zipkin collectors. Note that the
	// Zipkin cluster must be defined in the :ref:`Bootstrap static cluster
	// resources <envoy_api_field_config.bootstrap.v2.Bootstrap.StaticResources.clusters>`.
	CollectorCluster string `protobuf:"bytes,1,opt,name=collector_cluster,json=collectorCluster,proto3" json:"collector_cluster,omitempty"`
	// The API endpoint of the Zipkin service where the spans will be sent. When
	// using a standard Zipkin installation, the API endpoint is typically
	// /api/v1/spans, which is the default value.
	CollectorEndpoint string `protobuf:"bytes,2,opt,name=collector_endpoint,json=collectorEndpoint,proto3" json:"collector_endpoint,omitempty"`
	// Determines whether a 128bit trace id will be used when creating a new
	// trace instance. The default value is false, which will result in a 64 bit trace id being used.
	TraceId_128Bit bool `protobuf:"varint,3,opt,name=trace_id_128bit,json=traceId128bit,proto3" json:"trace_id_128bit,omitempty"`
	// Determines whether client and server spans will shared the same span id.
	// The default value is true.
	SharedSpanContext    *wrappers.BoolValue `protobuf:"bytes,4,opt,name=shared_span_context,json=sharedSpanContext,proto3" json:"shared_span_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ZipkinConfig) Reset()         { *m = ZipkinConfig{} }
func (m *ZipkinConfig) String() string { return proto.CompactTextString(m) }
func (*ZipkinConfig) ProtoMessage()    {}
func (*ZipkinConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0785d24fc8ab55c7, []int{2}
}

func (m *ZipkinConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZipkinConfig.Unmarshal(m, b)
}
func (m *ZipkinConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZipkinConfig.Marshal(b, m, deterministic)
}
func (m *ZipkinConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZipkinConfig.Merge(m, src)
}
func (m *ZipkinConfig) XXX_Size() int {
	return xxx_messageInfo_ZipkinConfig.Size(m)
}
func (m *ZipkinConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ZipkinConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ZipkinConfig proto.InternalMessageInfo

func (m *ZipkinConfig) GetCollectorCluster() string {
	if m != nil {
		return m.CollectorCluster
	}
	return ""
}

func (m *ZipkinConfig) GetCollectorEndpoint() string {
	if m != nil {
		return m.CollectorEndpoint
	}
	return ""
}

func (m *ZipkinConfig) GetTraceId_128Bit() bool {
	if m != nil {
		return m.TraceId_128Bit
	}
	return false
}

func (m *ZipkinConfig) GetSharedSpanContext() *wrappers.BoolValue {
	if m != nil {
		return m.SharedSpanContext
	}
	return nil
}

// DynamicOtConfig is used to dynamically load a tracer from a shared library
// that implements the `OpenTracing dynamic loading API
// <https://github.com/opentracing/opentracing-cpp>`_.
type DynamicOtConfig struct {
	// Dynamic library implementing the `OpenTracing API
	// <https://github.com/opentracing/opentracing-cpp>`_.
	Library string `protobuf:"bytes,1,opt,name=library,proto3" json:"library,omitempty"`
	// The configuration to use when creating a tracer from the given dynamic
	// library.
	Config               *_struct.Struct `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DynamicOtConfig) Reset()         { *m = DynamicOtConfig{} }
func (m *DynamicOtConfig) String() string { return proto.CompactTextString(m) }
func (*DynamicOtConfig) ProtoMessage()    {}
func (*DynamicOtConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0785d24fc8ab55c7, []int{3}
}

func (m *DynamicOtConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DynamicOtConfig.Unmarshal(m, b)
}
func (m *DynamicOtConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DynamicOtConfig.Marshal(b, m, deterministic)
}
func (m *DynamicOtConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DynamicOtConfig.Merge(m, src)
}
func (m *DynamicOtConfig) XXX_Size() int {
	return xxx_messageInfo_DynamicOtConfig.Size(m)
}
func (m *DynamicOtConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DynamicOtConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DynamicOtConfig proto.InternalMessageInfo

func (m *DynamicOtConfig) GetLibrary() string {
	if m != nil {
		return m.Library
	}
	return ""
}

func (m *DynamicOtConfig) GetConfig() *_struct.Struct {
	if m != nil {
		return m.Config
	}
	return nil
}

// Configuration for the Datadog tracer.
type DatadogConfig struct {
	// The cluster to use for submitting traces to the Datadog agent.
	CollectorCluster string `protobuf:"bytes,1,opt,name=collector_cluster,json=collectorCluster,proto3" json:"collector_cluster,omitempty"`
	// The name used for the service when traces are generated by envoy.
	ServiceName          string   `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DatadogConfig) Reset()         { *m = DatadogConfig{} }
func (m *DatadogConfig) String() string { return proto.CompactTextString(m) }
func (*DatadogConfig) ProtoMessage()    {}
func (*DatadogConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0785d24fc8ab55c7, []int{4}
}

func (m *DatadogConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DatadogConfig.Unmarshal(m, b)
}
func (m *DatadogConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DatadogConfig.Marshal(b, m, deterministic)
}
func (m *DatadogConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatadogConfig.Merge(m, src)
}
func (m *DatadogConfig) XXX_Size() int {
	return xxx_messageInfo_DatadogConfig.Size(m)
}
func (m *DatadogConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DatadogConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DatadogConfig proto.InternalMessageInfo

func (m *DatadogConfig) GetCollectorCluster() string {
	if m != nil {
		return m.CollectorCluster
	}
	return ""
}

func (m *DatadogConfig) GetServiceName() string {
	if m != nil {
		return m.ServiceName
	}
	return ""
}

// Configuration for the OpenCensus tracer.
// [#proto-status: experimental]
type OpenCensusConfig struct {
	// Configures tracing, e.g. the sampler, max number of annotations, etc.
	TraceConfig *v1.TraceConfig `protobuf:"bytes,1,opt,name=trace_config,json=traceConfig,proto3" json:"trace_config,omitempty"`
	// Enables the stdout exporter if set to true. This is intended for debugging
	// purposes.
	StdoutExporterEnabled bool `protobuf:"varint,2,opt,name=stdout_exporter_enabled,json=stdoutExporterEnabled,proto3" json:"stdout_exporter_enabled,omitempty"`
	// Enables the Stackdriver exporter if set to true. The project_id must also
	// be set.
	StackdriverExporterEnabled bool `protobuf:"varint,3,opt,name=stackdriver_exporter_enabled,json=stackdriverExporterEnabled,proto3" json:"stackdriver_exporter_enabled,omitempty"`
	// The Cloud project_id to use for Stackdriver tracing.
	StackdriverProjectId string `protobuf:"bytes,4,opt,name=stackdriver_project_id,json=stackdriverProjectId,proto3" json:"stackdriver_project_id,omitempty"`
	// (optional) By default, the Stackdriver exporter will connect to production
	// Stackdriver. If stackdriver_address is non-empty, it will instead connect
	// to this address, which is in the gRPC format:
	// https://github.com/grpc/grpc/blob/master/doc/naming.md
	StackdriverAddress string `protobuf:"bytes,10,opt,name=stackdriver_address,json=stackdriverAddress,proto3" json:"stackdriver_address,omitempty"`
	// Enables the Zipkin exporter if set to true. The url and service name must
	// also be set.
	ZipkinExporterEnabled bool `protobuf:"varint,5,opt,name=zipkin_exporter_enabled,json=zipkinExporterEnabled,proto3" json:"zipkin_exporter_enabled,omitempty"`
	// The URL to Zipkin, e.g. "http://127.0.0.1:9411/api/v2/spans"
	ZipkinUrl string `protobuf:"bytes,6,opt,name=zipkin_url,json=zipkinUrl,proto3" json:"zipkin_url,omitempty"`
	// List of incoming trace context headers we will accept. First one found
	// wins.
	IncomingTraceContext []OpenCensusConfig_TraceContext `protobuf:"varint,8,rep,packed,name=incoming_trace_context,json=incomingTraceContext,proto3,enum=envoy.config.trace.v2.OpenCensusConfig_TraceContext" json:"incoming_trace_context,omitempty"`
	// List of outgoing trace context headers we will produce.
	OutgoingTraceContext []OpenCensusConfig_TraceContext `protobuf:"varint,9,rep,packed,name=outgoing_trace_context,json=outgoingTraceContext,proto3,enum=envoy.config.trace.v2.OpenCensusConfig_TraceContext" json:"outgoing_trace_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *OpenCensusConfig) Reset()         { *m = OpenCensusConfig{} }
func (m *OpenCensusConfig) String() string { return proto.CompactTextString(m) }
func (*OpenCensusConfig) ProtoMessage()    {}
func (*OpenCensusConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0785d24fc8ab55c7, []int{5}
}

func (m *OpenCensusConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenCensusConfig.Unmarshal(m, b)
}
func (m *OpenCensusConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenCensusConfig.Marshal(b, m, deterministic)
}
func (m *OpenCensusConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenCensusConfig.Merge(m, src)
}
func (m *OpenCensusConfig) XXX_Size() int {
	return xxx_messageInfo_OpenCensusConfig.Size(m)
}
func (m *OpenCensusConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenCensusConfig.DiscardUnknown(m)
}

var xxx_messageInfo_OpenCensusConfig proto.InternalMessageInfo

func (m *OpenCensusConfig) GetTraceConfig() *v1.TraceConfig {
	if m != nil {
		return m.TraceConfig
	}
	return nil
}

func (m *OpenCensusConfig) GetStdoutExporterEnabled() bool {
	if m != nil {
		return m.StdoutExporterEnabled
	}
	return false
}

func (m *OpenCensusConfig) GetStackdriverExporterEnabled() bool {
	if m != nil {
		return m.StackdriverExporterEnabled
	}
	return false
}

func (m *OpenCensusConfig) GetStackdriverProjectId() string {
	if m != nil {
		return m.StackdriverProjectId
	}
	return ""
}

func (m *OpenCensusConfig) GetStackdriverAddress() string {
	if m != nil {
		return m.StackdriverAddress
	}
	return ""
}

func (m *OpenCensusConfig) GetZipkinExporterEnabled() bool {
	if m != nil {
		return m.ZipkinExporterEnabled
	}
	return false
}

func (m *OpenCensusConfig) GetZipkinUrl() string {
	if m != nil {
		return m.ZipkinUrl
	}
	return ""
}

func (m *OpenCensusConfig) GetIncomingTraceContext() []OpenCensusConfig_TraceContext {
	if m != nil {
		return m.IncomingTraceContext
	}
	return nil
}

func (m *OpenCensusConfig) GetOutgoingTraceContext() []OpenCensusConfig_TraceContext {
	if m != nil {
		return m.OutgoingTraceContext
	}
	return nil
}

// Configuration structure.
type TraceServiceConfig struct {
	// The upstream gRPC cluster that hosts the metrics service.
	GrpcService          *core.GrpcService `protobuf:"bytes,1,opt,name=grpc_service,json=grpcService,proto3" json:"grpc_service,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TraceServiceConfig) Reset()         { *m = TraceServiceConfig{} }
func (m *TraceServiceConfig) String() string { return proto.CompactTextString(m) }
func (*TraceServiceConfig) ProtoMessage()    {}
func (*TraceServiceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_0785d24fc8ab55c7, []int{6}
}

func (m *TraceServiceConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TraceServiceConfig.Unmarshal(m, b)
}
func (m *TraceServiceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TraceServiceConfig.Marshal(b, m, deterministic)
}
func (m *TraceServiceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceServiceConfig.Merge(m, src)
}
func (m *TraceServiceConfig) XXX_Size() int {
	return xxx_messageInfo_TraceServiceConfig.Size(m)
}
func (m *TraceServiceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceServiceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TraceServiceConfig proto.InternalMessageInfo

func (m *TraceServiceConfig) GetGrpcService() *core.GrpcService {
	if m != nil {
		return m.GrpcService
	}
	return nil
}

func init() {
	proto.RegisterEnum("envoy.config.trace.v2.OpenCensusConfig_TraceContext", OpenCensusConfig_TraceContext_name, OpenCensusConfig_TraceContext_value)
	proto.RegisterType((*Tracing)(nil), "envoy.config.trace.v2.Tracing")
	proto.RegisterType((*Tracing_Http)(nil), "envoy.config.trace.v2.Tracing.Http")
	proto.RegisterType((*LightstepConfig)(nil), "envoy.config.trace.v2.LightstepConfig")
	proto.RegisterType((*ZipkinConfig)(nil), "envoy.config.trace.v2.ZipkinConfig")
	proto.RegisterType((*DynamicOtConfig)(nil), "envoy.config.trace.v2.DynamicOtConfig")
	proto.RegisterType((*DatadogConfig)(nil), "envoy.config.trace.v2.DatadogConfig")
	proto.RegisterType((*OpenCensusConfig)(nil), "envoy.config.trace.v2.OpenCensusConfig")
	proto.RegisterType((*TraceServiceConfig)(nil), "envoy.config.trace.v2.TraceServiceConfig")
}

func init() { proto.RegisterFile("envoy/config/trace/v2/trace.proto", fileDescriptor_0785d24fc8ab55c7) }

var fileDescriptor_0785d24fc8ab55c7 = []byte{
	// 891 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x4d, 0x6e, 0xdb, 0x46,
	0x14, 0x36, 0x65, 0xd9, 0x96, 0x9e, 0xe4, 0x58, 0x1e, 0x3b, 0xb1, 0x2a, 0x24, 0x81, 0x2b, 0x17,
	0x41, 0x16, 0x01, 0x05, 0x2b, 0x69, 0x92, 0xee, 0x6a, 0xc9, 0x6a, 0xec, 0x20, 0x95, 0x0c, 0x5a,
	0x29, 0x8a, 0x6c, 0xd8, 0xd1, 0x70, 0x4c, 0x4f, 0x4c, 0x73, 0x06, 0xc3, 0xa1, 0x6a, 0x75, 0xd5,
	0x75, 0x8f, 0xd1, 0x63, 0x74, 0xd5, 0x4b, 0xf4, 0x0c, 0x45, 0xf7, 0x3d, 0x40, 0xc1, 0x99, 0xa1,
	0x4d, 0x4b, 0x29, 0x10, 0xc0, 0x3b, 0xf2, 0x7d, 0xdf, 0xf7, 0xfe, 0x1f, 0x09, 0x5f, 0xd2, 0x78,
	0xca, 0x67, 0x1d, 0xc2, 0xe3, 0x33, 0x16, 0x76, 0x94, 0xc4, 0x84, 0x76, 0xa6, 0x5d, 0xf3, 0xe0,
	0x0a, 0xc9, 0x15, 0x47, 0xf7, 0x35, 0xc5, 0x35, 0x14, 0xd7, 0x20, 0xd3, 0x6e, 0xeb, 0x2b, 0xa3,
	0xc4, 0x82, 0x65, 0x02, 0xc2, 0x25, 0xed, 0x84, 0x52, 0x10, 0x3f, 0xa1, 0x72, 0xca, 0x72, 0x71,
	0xeb, 0x19, 0x17, 0x34, 0x26, 0x34, 0x4e, 0xd2, 0xa4, 0xa3, 0x2d, 0x79, 0x8c, 0x7d, 0xf3, 0xe0,
	0x5b, 0xb7, 0x86, 0xfd, 0x45, 0xc8, 0x79, 0x18, 0x51, 0xc3, 0x9c, 0xa4, 0x67, 0x1d, 0x1c, 0xcf,
	0x2c, 0xf4, 0x70, 0x1e, 0x4a, 0x94, 0x4c, 0x89, 0xb2, 0xe8, 0xe3, 0x79, 0xf4, 0x67, 0x89, 0x85,
	0xa0, 0x32, 0xb1, 0xf8, 0xce, 0x14, 0x47, 0x2c, 0xc0, 0x8a, 0x76, 0xf2, 0x07, 0x03, 0xb4, 0xff,
	0x76, 0x60, 0x6d, 0x2c, 0x31, 0x61, 0x71, 0x88, 0x5e, 0x41, 0xf9, 0x5c, 0x29, 0xd1, 0x74, 0x76,
	0x9d, 0xa7, 0xb5, 0xee, 0x9e, 0xfb, 0xc9, 0xba, 0x5d, 0xcb, 0x76, 0x8f, 0x94, 0x12, 0x9e, 0x16,
	0xb4, 0x7e, 0x77, 0xa0, 0x9c, 0xbd, 0xa2, 0x47, 0x50, 0x8e, 0xf1, 0x25, 0xd5, 0x1e, 0xaa, 0xbd,
	0xea, 0x1f, 0xff, 0xfc, 0xb9, 0x5c, 0x96, 0xa5, 0x5d, 0xc7, 0xd3, 0x66, 0xb4, 0x0f, 0xab, 0xc6,
	0x5b, 0xb3, 0xa4, 0x43, 0xec, 0xb8, 0x26, 0x6d, 0x37, 0x4f, 0xdb, 0x3d, 0xd5, 0x45, 0x1d, 0x2d,
	0x79, 0x96, 0x88, 0xbe, 0x81, 0xba, 0x9a, 0x09, 0x1a, 0xd8, 0x3e, 0x35, 0x97, 0xb5, 0x70, 0x7b,
	0x41, 0x78, 0x10, 0xcf, 0x8e, 0x96, 0xbc, 0x9a, 0xe6, 0xf6, 0x35, 0xb5, 0xb7, 0x0e, 0x35, 0x23,
	0xf2, 0x33, 0x6b, 0xfb, 0x57, 0x07, 0x36, 0xde, 0xb1, 0xf0, 0x5c, 0x25, 0x8a, 0x0a, 0x43, 0x41,
	0x2f, 0x61, 0x93, 0xf0, 0x28, 0xa2, 0x44, 0x71, 0xe9, 0x93, 0x28, 0x4d, 0x14, 0x95, 0x8b, 0xc9,
	0x37, 0xae, 0x39, 0x7d, 0x43, 0x41, 0x5f, 0xc3, 0x26, 0x26, 0x84, 0x26, 0x89, 0xaf, 0xf8, 0x05,
	0x8d, 0xfd, 0x33, 0x16, 0x51, 0x5d, 0xd3, 0x2d, 0xdd, 0x86, 0xe1, 0x8c, 0x33, 0xca, 0x77, 0x2c,
	0xa2, 0xed, 0x7f, 0x1d, 0xa8, 0x7f, 0x60, 0xe2, 0x82, 0xc5, 0x77, 0x8c, 0xff, 0x1a, 0xd0, 0x8d,
	0x8e, 0xc6, 0x81, 0xe0, 0x2c, 0x56, 0x8b, 0x09, 0xdc, 0x38, 0x1f, 0x58, 0x0e, 0x7a, 0x02, 0x1b,
	0x66, 0xef, 0x58, 0xe0, 0xef, 0x77, 0x5f, 0x4f, 0x98, 0xd2, 0x2d, 0xad, 0x78, 0xeb, 0xda, 0x7c,
	0x1c, 0x18, 0x23, 0x7a, 0x0b, 0x5b, 0xc9, 0x39, 0x96, 0x34, 0xf0, 0x13, 0x81, 0xe3, 0xac, 0xfb,
	0x8a, 0x5e, 0xa9, 0x66, 0x59, 0xb7, 0xbf, 0xb5, 0xd0, 0xfe, 0x1e, 0xe7, 0xd1, 0x0f, 0x38, 0x4a,
	0xa9, 0xb7, 0x69, 0x64, 0xa7, 0x02, 0x67, 0x45, 0x66, 0xa2, 0x76, 0x08, 0x1b, 0x87, 0xb3, 0x18,
	0x5f, 0x32, 0x32, 0x52, 0xb6, 0xf0, 0x3d, 0x58, 0x8b, 0xd8, 0x44, 0x62, 0x39, 0x5b, 0x2c, 0x37,
	0x47, 0x50, 0xe7, 0x33, 0xd7, 0x25, 0x5f, 0x96, 0x76, 0x0a, 0xeb, 0x87, 0x58, 0xe1, 0x80, 0x87,
	0x77, 0xec, 0xef, 0x33, 0xa8, 0xdb, 0x33, 0xf6, 0xf5, 0x3e, 0x2f, 0x74, 0xb6, 0x66, 0xe1, 0x21,
	0xbe, 0xa4, 0xed, 0xbf, 0x56, 0xa0, 0x31, 0x12, 0x34, 0xee, 0xeb, 0x33, 0xb7, 0xa1, 0x8f, 0xa1,
	0x5e, 0x3c, 0x70, 0x7b, 0x54, 0x4f, 0xdc, 0x9b, 0xef, 0x81, 0x29, 0x23, 0x3f, 0xac, 0x7d, 0x7d,
	0x58, 0xd4, 0xa8, 0xbd, 0x9a, 0xba, 0x79, 0x41, 0x2f, 0x61, 0x27, 0x51, 0x01, 0x4f, 0x95, 0x4f,
	0xaf, 0x04, 0x97, 0x8a, 0x66, 0x33, 0xc7, 0x93, 0x88, 0x06, 0x3a, 0xb1, 0x8a, 0x77, 0xdf, 0xc0,
	0x03, 0x8b, 0x0e, 0x0c, 0x88, 0xbe, 0x85, 0x87, 0x89, 0xc2, 0xe4, 0x22, 0x90, 0x6c, 0x9a, 0x69,
	0xe6, 0xc5, 0x66, 0xf0, 0xad, 0x02, 0x67, 0xde, 0xc3, 0x0b, 0x78, 0x50, 0xf4, 0x20, 0x24, 0xff,
	0x48, 0x89, 0xf2, 0x59, 0xa0, 0x17, 0xa1, 0xea, 0x6d, 0x17, 0xd0, 0x13, 0x03, 0x1e, 0x07, 0xa8,
	0x03, 0x5b, 0x45, 0x15, 0x0e, 0x02, 0x49, 0x93, 0xa4, 0x09, 0x5a, 0x82, 0x0a, 0xd0, 0x81, 0x41,
	0xb2, 0x02, 0x7f, 0xd1, 0x67, 0xb1, 0x98, 0xe3, 0x8a, 0x29, 0xd0, 0xc0, 0xf3, 0xe9, 0x3d, 0x02,
	0xb0, 0xba, 0x54, 0x46, 0xcd, 0x55, 0xed, 0xbf, 0x6a, 0x2c, 0xef, 0x65, 0x84, 0x3e, 0xc2, 0x03,
	0x16, 0x13, 0x7e, 0xc9, 0xe2, 0xd0, 0xbf, 0x9e, 0x85, 0x5e, 0xe3, 0xca, 0xee, 0xf2, 0xd3, 0x7b,
	0xdd, 0x17, 0xff, 0xf3, 0x85, 0x9b, 0x9f, 0xe5, 0xf5, 0x64, 0x32, 0xad, 0xb7, 0x9d, 0xfb, 0x2c,
	0x5a, 0xb3, 0x58, 0x3c, 0x55, 0x21, 0x5f, 0x8c, 0x55, 0xbd, 0x4b, 0xac, 0xdc, 0x67, 0xd1, 0xda,
	0xfe, 0x09, 0xea, 0xb7, 0x62, 0x57, 0xa0, 0x3c, 0x1c, 0x0d, 0x07, 0x8d, 0x25, 0xb4, 0x09, 0xeb,
	0x63, 0xef, 0xa0, 0x3f, 0xf0, 0xfb, 0xa3, 0xe1, 0x78, 0xf0, 0xe3, 0xb8, 0xe1, 0x20, 0x04, 0xf7,
	0xde, 0x78, 0x27, 0x7d, 0xdf, 0xd8, 0x7b, 0xc7, 0xc3, 0x46, 0x09, 0xed, 0xc0, 0x56, 0xff, 0xdd,
	0xe8, 0xfd, 0xa1, 0x7f, 0x9b, 0xbc, 0x8c, 0x56, 0xa1, 0xd4, 0x7b, 0xde, 0x28, 0xbf, 0x2d, 0x57,
	0xd6, 0x1a, 0x95, 0x36, 0x01, 0xa4, 0xe3, 0x9c, 0x9a, 0x5d, 0xb7, 0xdb, 0xf8, 0x3d, 0xd4, 0x8b,
	0xff, 0x39, 0xbb, 0xd8, 0x8f, 0x6d, 0x7d, 0x58, 0xb0, 0xac, 0xac, 0xec, 0x77, 0xe8, 0xbe, 0x91,
	0x82, 0x58, 0x6d, 0x0f, 0xb2, 0xdb, 0x59, 0xf9, 0xcd, 0x29, 0x35, 0x1c, 0xaf, 0x16, 0x16, 0x80,
	0x57, 0xb0, 0xc7, 0xb8, 0x11, 0x0b, 0xc9, 0xaf, 0x66, 0x9f, 0xee, 0x53, 0x0f, 0x74, 0x26, 0x27,
	0xd9, 0xc5, 0x9c, 0x38, 0x1f, 0x4a, 0xd3, 0xee, 0x64, 0x55, 0x9f, 0xcf, 0xf3, 0xff, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x5a, 0x30, 0xce, 0x03, 0xc2, 0x07, 0x00, 0x00,
}
