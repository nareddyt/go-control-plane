// Code generated by protoc-gen-go. DO NOT EDIT.
// source: envoy/config/filter/network/client_ssl_auth/v2/client_ssl_auth.proto

package v2

import (
	fmt "fmt"
	core "github.com/envoyproxy/go-control-plane/envoy/api/v2/core"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ClientSSLAuth struct {
	// The :ref:`cluster manager <arch_overview_cluster_manager>` cluster that runs
	// the authentication service. The filter will connect to the service every 60s to fetch the list
	// of principals. The service must support the expected :ref:`REST API
	// <config_network_filters_client_ssl_auth_rest_api>`.
	AuthApiCluster string `protobuf:"bytes,1,opt,name=auth_api_cluster,json=authApiCluster,proto3" json:"auth_api_cluster,omitempty"`
	// The prefix to use when emitting :ref:`statistics
	// <config_network_filters_client_ssl_auth_stats>`.
	StatPrefix string `protobuf:"bytes,2,opt,name=stat_prefix,json=statPrefix,proto3" json:"stat_prefix,omitempty"`
	// Time in milliseconds between principal refreshes from the
	// authentication service. Default is 60000 (60s). The actual fetch time
	// will be this value plus a random jittered value between
	// 0-refresh_delay_ms milliseconds.
	RefreshDelay *duration.Duration `protobuf:"bytes,3,opt,name=refresh_delay,json=refreshDelay,proto3" json:"refresh_delay,omitempty"`
	// An optional list of IP address and subnet masks that should be white
	// listed for access by the filter. If no list is provided, there is no
	// IP white list.
	IpWhiteList          []*core.CidrRange `protobuf:"bytes,4,rep,name=ip_white_list,json=ipWhiteList,proto3" json:"ip_white_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ClientSSLAuth) Reset()         { *m = ClientSSLAuth{} }
func (m *ClientSSLAuth) String() string { return proto.CompactTextString(m) }
func (*ClientSSLAuth) ProtoMessage()    {}
func (*ClientSSLAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c05e9c9b57da130, []int{0}
}

func (m *ClientSSLAuth) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientSSLAuth.Unmarshal(m, b)
}
func (m *ClientSSLAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientSSLAuth.Marshal(b, m, deterministic)
}
func (m *ClientSSLAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientSSLAuth.Merge(m, src)
}
func (m *ClientSSLAuth) XXX_Size() int {
	return xxx_messageInfo_ClientSSLAuth.Size(m)
}
func (m *ClientSSLAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientSSLAuth.DiscardUnknown(m)
}

var xxx_messageInfo_ClientSSLAuth proto.InternalMessageInfo

func (m *ClientSSLAuth) GetAuthApiCluster() string {
	if m != nil {
		return m.AuthApiCluster
	}
	return ""
}

func (m *ClientSSLAuth) GetStatPrefix() string {
	if m != nil {
		return m.StatPrefix
	}
	return ""
}

func (m *ClientSSLAuth) GetRefreshDelay() *duration.Duration {
	if m != nil {
		return m.RefreshDelay
	}
	return nil
}

func (m *ClientSSLAuth) GetIpWhiteList() []*core.CidrRange {
	if m != nil {
		return m.IpWhiteList
	}
	return nil
}

func init() {
	proto.RegisterType((*ClientSSLAuth)(nil), "envoy.config.filter.network.client_ssl_auth.v2.ClientSSLAuth")
}

func init() {
	proto.RegisterFile("envoy/config/filter/network/client_ssl_auth/v2/client_ssl_auth.proto", fileDescriptor_2c05e9c9b57da130)
}

var fileDescriptor_2c05e9c9b57da130 = []byte{
	// 373 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0xbd, 0xae, 0xd3, 0x30,
	0x14, 0x56, 0xda, 0x0a, 0xa9, 0x0e, 0x45, 0x28, 0x42, 0x22, 0x54, 0x88, 0x46, 0x4c, 0x15, 0x83,
	0x2d, 0xa5, 0x2b, 0x03, 0x4d, 0x33, 0x76, 0xa8, 0xd2, 0x01, 0xc4, 0x62, 0xb9, 0x8d, 0x93, 0x1c,
	0x61, 0xc5, 0x96, 0xed, 0xa4, 0xed, 0x9b, 0xf0, 0x2c, 0x4c, 0xbc, 0x09, 0x33, 0x6f, 0x70, 0xc7,
	0x2b, 0xc7, 0xe9, 0xd2, 0xed, 0x6e, 0x27, 0xe7, 0xfb, 0xc9, 0xf9, 0x3e, 0xa3, 0x9c, 0xb7, 0xbd,
	0xbc, 0x91, 0xb3, 0x6c, 0x2b, 0xa8, 0x49, 0x05, 0xc2, 0x72, 0x4d, 0x5a, 0x6e, 0x2f, 0x52, 0xff,
	0x22, 0x67, 0x01, 0xbc, 0xb5, 0xd4, 0x18, 0x41, 0x59, 0x67, 0x1b, 0xd2, 0xa7, 0x8f, 0x2b, 0xac,
	0xb4, 0xb4, 0x32, 0xc2, 0x83, 0x0b, 0xf6, 0x2e, 0xd8, 0xbb, 0xe0, 0xd1, 0x05, 0x3f, 0x4a, 0xfa,
	0x74, 0xb9, 0xf2, 0x7f, 0x65, 0x0a, 0x06, 0x4f, 0xa9, 0x39, 0x61, 0x65, 0xa9, 0xb9, 0x31, 0xde,
	0x70, 0xf9, 0xa9, 0x96, 0xb2, 0x16, 0x9c, 0x0c, 0x5f, 0xa7, 0xae, 0x22, 0x65, 0xa7, 0x99, 0x05,
	0xd9, 0x8e, 0xf8, 0xfb, 0x9e, 0x09, 0x28, 0x99, 0xe5, 0xe4, 0x3e, 0x8c, 0xc0, 0xbb, 0x5a, 0xd6,
	0x72, 0x18, 0x89, 0x9b, 0xfc, 0xf6, 0xf3, 0x53, 0x80, 0x16, 0xbb, 0xe1, 0x8c, 0xe3, 0x71, 0xbf,
	0xed, 0x6c, 0x13, 0x6d, 0xd0, 0x5b, 0x77, 0x0c, 0x65, 0x0a, 0xe8, 0x59, 0x74, 0xc6, 0x72, 0x1d,
	0x07, 0x49, 0xb0, 0x9e, 0x67, 0xf3, 0x3f, 0xff, 0xff, 0x4e, 0x67, 0x7a, 0x92, 0x04, 0xc5, 0x1b,
	0x47, 0xd9, 0x2a, 0xd8, 0x79, 0x42, 0xf4, 0x05, 0x85, 0xc6, 0x32, 0x4b, 0x95, 0xe6, 0x15, 0x5c,
	0xe3, 0xc9, 0x23, 0x1f, 0x39, 0xf4, 0x30, 0x80, 0x51, 0x8e, 0x16, 0x9a, 0x57, 0x9a, 0x9b, 0x86,
	0x96, 0x5c, 0xb0, 0x5b, 0x3c, 0x4d, 0x82, 0x75, 0x98, 0x7e, 0xc0, 0x3e, 0x19, 0xbe, 0x27, 0xc3,
	0xf9, 0x98, 0x2c, 0x9b, 0xfd, 0xfe, 0xb7, 0x0a, 0x8a, 0xd7, 0xa3, 0x2a, 0x77, 0xa2, 0xe8, 0x1b,
	0x5a, 0x80, 0xa2, 0x97, 0x06, 0x2c, 0xa7, 0x02, 0x8c, 0x8d, 0x67, 0xc9, 0x74, 0x1d, 0xa6, 0x1f,
	0xc7, 0xc2, 0x99, 0x02, 0xdc, 0xa7, 0xd8, 0x15, 0x88, 0x77, 0x50, 0xea, 0x82, 0xb5, 0x35, 0x2f,
	0x42, 0x50, 0xdf, 0x9d, 0x62, 0x0f, 0xc6, 0x66, 0x3f, 0xd0, 0x57, 0x90, 0x9e, 0xae, 0xb4, 0xbc,
	0xde, 0x5e, 0xf8, 0x54, 0x59, 0x34, 0xf6, 0x66, 0x84, 0xeb, 0xed, 0xe0, 0xae, 0x3e, 0x04, 0x3f,
	0x27, 0x7d, 0x7a, 0x7a, 0x35, 0x44, 0xd8, 0x3c, 0x07, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xde, 0x38,
	0x97, 0x43, 0x02, 0x00, 0x00,
}
